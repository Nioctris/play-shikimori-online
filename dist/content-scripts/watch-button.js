function anime365API(path, options = {}) {

  return new Promise((resolve, reject) => {
    const url = 'https://smotretanime.ru/api' + path;
    let headers = new Headers({
      "Accept": "application/json",
      "Content-Type": "application/json",
      "User-Agent": "Play Shikimori; Browser extension; https://github.com/cawa-93/play-shikimori"
    });

    options.headers = headers;

    chrome.runtime.sendMessage({
      contentScriptQuery: 'fetchUrl',
      url,
      options,
    },
      ({ response, error }) => {
        if (error) {
          return reject(error)
        }

        resolve(response);
      });


  })
}

function shikimoriAPI(path, options = {}) {

  return new Promise((resolve, reject) => {
    const url = 'https://shikimori.org/api' + path;
    let headers = new Headers({
      "Accept": "application/json",
      "Content-Type": "application/json",
      "User-Agent": "Play Shikimori; Browser extension; https://github.com/cawa-93/play-shikimori"
    });

    options.headers = headers;

    chrome.runtime.sendMessage({
      contentScriptQuery: 'fetchUrl',
      url,
      options,
    },
      ({ response, error }) => {
        if (error) {
          return reject(error)
        }

        resolve(response);
      });


  })
}

// Запуск главной функции
const mainObserver = new MutationObserver(main);
const observerConfig = { attributes: true, subtree: true, childList: true };
mainObserver.observe(document, observerConfig);
main();


async function main() {
	const infoSection = document.querySelector('body#animes_show .c-info-right');
	const WatchOnlineButton = document.querySelector('#watch-online-button');

	if (!infoSection || WatchOnlineButton) return

	// Созданиие кнопки для перехода к плееру
	const WatchButtonSection = document.createElement('section');
	WatchButtonSection.classList.add('block');
	WatchButtonSection.classList.add('watch-online-block');
	WatchButtonSection.innerHTML = `
		<div class="subheadline m10">Онлайн просмотр</div>
		<a href="#" target="_blank" id="watch-online-button" class="b-link_button dark">Загрузка</a>
		`;
	infoSection.appendChild(WatchButtonSection);

	// Загрузка метаданных аниме
	const anime = await getAnime();

	if (!anime) {
		WatchButtonSection.querySelector('#watch-online-button').textContent = 'Нет видео';
		return
	}

	// 
	const { data } = await anime365API(`/series/?myAnimeListId=${anime.myanimelist_id}`);
	const series = data[0];

	if (series && series.episodes && series.episodes.length) {
		/** @type {HTMLAnchorElement} */
		const link = WatchButtonSection.querySelector('#watch-online-button');
		link.textContent = 'Смотреть онлайн';

		const playerURL = new URL(chrome.runtime.getURL(`player/index.html`));
		playerURL.searchParams.append('series', series.id);

		if (anime.user_rate) {
			const startFromEpisode =
				series.episodes.find(episode => episode.episodeInt == anime.user_rate.episodes + 1)
				|| series.episodes.find(episode => episode.episodeInt == anime.user_rate.episodes)
				|| series.episodes.find(episode => episode.episodeInt == 1);

			playerURL.searchParams.append('episode', startFromEpisode.id);
		}

		link.href = playerURL.toString();
	} else {
		WatchButtonSection.querySelector('#watch-online-button').textContent = 'Нет видео';
	}

}



async function getAnime() {
	const idMatch = location.pathname.match('animes/([0-9]+)');
	if (!idMatch || !idMatch[1]) {
		return undefined
	}

	let headers = new Headers({
		"Accept": "application/json",
		"Content-Type": "application/json",
		"User-Agent": "Play Shikimori; Browser extension; https://github.com/cawa-93/play-shikimori"
	});

	const data = await shikimoriAPI(`/animes/${idMatch[1]}`, {
		headers
	});

	return data
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F0Y2gtYnV0dG9uLmpzIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaGVscGVycy9hbmltZS0zNjUtYXBpLmpzIiwiLi4vLi4vc3JjL2hlbHBlcnMvc2hpa2ltb3JpLWFwaS5qcyIsIi4uLy4uL3NyYy9jb250ZW50LXNjcmlwdHMvd2F0Y2gtYnV0dG9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGFuaW1lMzY1QVBJKHBhdGgsIG9wdGlvbnMgPSB7fSkge1xuXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgdXJsID0gJ2h0dHBzOi8vc21vdHJldGFuaW1lLnJ1L2FwaScgKyBwYXRoXG4gICAgbGV0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyh7XG4gICAgICBcIkFjY2VwdFwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgXCJVc2VyLUFnZW50XCI6IFwiUGxheSBTaGlraW1vcmk7IEJyb3dzZXIgZXh0ZW5zaW9uOyBodHRwczovL2dpdGh1Yi5jb20vY2F3YS05My9wbGF5LXNoaWtpbW9yaVwiXG4gICAgfSk7XG5cbiAgICBvcHRpb25zLmhlYWRlcnMgPSBoZWFkZXJzXG5cbiAgICBjaHJvbWUucnVudGltZS5zZW5kTWVzc2FnZSh7XG4gICAgICBjb250ZW50U2NyaXB0UXVlcnk6ICdmZXRjaFVybCcsXG4gICAgICB1cmwsXG4gICAgICBvcHRpb25zLFxuICAgIH0sXG4gICAgICAoeyByZXNwb25zZSwgZXJyb3IgfSkgPT4ge1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycm9yKVxuICAgICAgICB9XG5cbiAgICAgICAgcmVzb2x2ZShyZXNwb25zZSlcbiAgICAgIH0pXG5cblxuICB9KVxufVxuXG5leHBvcnQgeyBhbmltZTM2NUFQSSB9XG5leHBvcnQgZGVmYXVsdCBhbmltZTM2NUFQSSIsImZ1bmN0aW9uIHNoaWtpbW9yaUFQSShwYXRoLCBvcHRpb25zID0ge30pIHtcblxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IHVybCA9ICdodHRwczovL3NoaWtpbW9yaS5vcmcvYXBpJyArIHBhdGhcbiAgICBsZXQgaGVhZGVycyA9IG5ldyBIZWFkZXJzKHtcbiAgICAgIFwiQWNjZXB0XCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICBcIlVzZXItQWdlbnRcIjogXCJQbGF5IFNoaWtpbW9yaTsgQnJvd3NlciBleHRlbnNpb247IGh0dHBzOi8vZ2l0aHViLmNvbS9jYXdhLTkzL3BsYXktc2hpa2ltb3JpXCJcbiAgICB9KTtcblxuICAgIG9wdGlvbnMuaGVhZGVycyA9IGhlYWRlcnNcblxuICAgIGNocm9tZS5ydW50aW1lLnNlbmRNZXNzYWdlKHtcbiAgICAgIGNvbnRlbnRTY3JpcHRRdWVyeTogJ2ZldGNoVXJsJyxcbiAgICAgIHVybCxcbiAgICAgIG9wdGlvbnMsXG4gICAgfSxcbiAgICAgICh7IHJlc3BvbnNlLCBlcnJvciB9KSA9PiB7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIHJldHVybiByZWplY3QoZXJyb3IpXG4gICAgICAgIH1cblxuICAgICAgICByZXNvbHZlKHJlc3BvbnNlKVxuICAgICAgfSlcblxuXG4gIH0pXG59XG5cbmV4cG9ydCB7IHNoaWtpbW9yaUFQSSB9XG5leHBvcnQgZGVmYXVsdCBzaGlraW1vcmlBUEkiLCJpbXBvcnQgeyBhbmltZTM2NUFQSSwgc2hpa2ltb3JpQVBJIH0gZnJvbSAnLi4vaGVscGVycydcblxuLy8g0JfQsNC/0YPRgdC6INCz0LvQsNCy0L3QvtC5INGE0YPQvdC60YbQuNC4XG5jb25zdCBtYWluT2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihtYWluKVxuY29uc3Qgb2JzZXJ2ZXJDb25maWcgPSB7IGF0dHJpYnV0ZXM6IHRydWUsIHN1YnRyZWU6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZSB9XG5tYWluT2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudCwgb2JzZXJ2ZXJDb25maWcpXG5tYWluKClcblxuXG5hc3luYyBmdW5jdGlvbiBtYWluKCkge1xuXHRjb25zdCBpbmZvU2VjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHkjYW5pbWVzX3Nob3cgLmMtaW5mby1yaWdodCcpXG5cdGNvbnN0IFdhdGNoT25saW5lQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3dhdGNoLW9ubGluZS1idXR0b24nKVxuXG5cdGlmICghaW5mb1NlY3Rpb24gfHwgV2F0Y2hPbmxpbmVCdXR0b24pIHJldHVyblxuXG5cdC8vINCh0L7Qt9C00LDQvdC40LjQtSDQutC90L7Qv9C60Lgg0LTQu9GPINC/0LXRgNC10YXQvtC00LAg0Log0L/Qu9C10LXRgNGDXG5cdGNvbnN0IFdhdGNoQnV0dG9uU2VjdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NlY3Rpb24nKVxuXHRXYXRjaEJ1dHRvblNlY3Rpb24uY2xhc3NMaXN0LmFkZCgnYmxvY2snKVxuXHRXYXRjaEJ1dHRvblNlY3Rpb24uY2xhc3NMaXN0LmFkZCgnd2F0Y2gtb25saW5lLWJsb2NrJylcblx0V2F0Y2hCdXR0b25TZWN0aW9uLmlubmVySFRNTCA9IGBcblx0XHQ8ZGl2IGNsYXNzPVwic3ViaGVhZGxpbmUgbTEwXCI+0J7QvdC70LDQudC9INC/0YDQvtGB0LzQvtGC0YA8L2Rpdj5cblx0XHQ8YSBocmVmPVwiI1wiIHRhcmdldD1cIl9ibGFua1wiIGlkPVwid2F0Y2gtb25saW5lLWJ1dHRvblwiIGNsYXNzPVwiYi1saW5rX2J1dHRvbiBkYXJrXCI+0JfQsNCz0YDRg9C30LrQsDwvYT5cblx0XHRgXG5cdGluZm9TZWN0aW9uLmFwcGVuZENoaWxkKFdhdGNoQnV0dG9uU2VjdGlvbilcblxuXHQvLyDQl9Cw0LPRgNGD0LfQutCwINC80LXRgtCw0LTQsNC90L3Ri9GFINCw0L3QuNC80LVcblx0Y29uc3QgYW5pbWUgPSBhd2FpdCBnZXRBbmltZSgpXG5cblx0aWYgKCFhbmltZSkge1xuXHRcdFdhdGNoQnV0dG9uU2VjdGlvbi5xdWVyeVNlbGVjdG9yKCcjd2F0Y2gtb25saW5lLWJ1dHRvbicpLnRleHRDb250ZW50ID0gJ9Cd0LXRgiDQstC40LTQtdC+J1xuXHRcdHJldHVyblxuXHR9XG5cblx0Ly8gXG5cdGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgYW5pbWUzNjVBUEkoYC9zZXJpZXMvP215QW5pbWVMaXN0SWQ9JHthbmltZS5teWFuaW1lbGlzdF9pZH1gKVxuXHRjb25zdCBzZXJpZXMgPSBkYXRhWzBdXG5cblx0aWYgKHNlcmllcyAmJiBzZXJpZXMuZXBpc29kZXMgJiYgc2VyaWVzLmVwaXNvZGVzLmxlbmd0aCkge1xuXHRcdC8qKiBAdHlwZSB7SFRNTEFuY2hvckVsZW1lbnR9ICovXG5cdFx0Y29uc3QgbGluayA9IFdhdGNoQnV0dG9uU2VjdGlvbi5xdWVyeVNlbGVjdG9yKCcjd2F0Y2gtb25saW5lLWJ1dHRvbicpXG5cdFx0bGluay50ZXh0Q29udGVudCA9ICfQodC80L7RgtGA0LXRgtGMINC+0L3Qu9Cw0LnQvSdcblxuXHRcdGNvbnN0IHBsYXllclVSTCA9IG5ldyBVUkwoY2hyb21lLnJ1bnRpbWUuZ2V0VVJMKGBwbGF5ZXIvaW5kZXguaHRtbGApKVxuXHRcdHBsYXllclVSTC5zZWFyY2hQYXJhbXMuYXBwZW5kKCdzZXJpZXMnLCBzZXJpZXMuaWQpXG5cblx0XHRpZiAoYW5pbWUudXNlcl9yYXRlKSB7XG5cdFx0XHRjb25zdCBzdGFydEZyb21FcGlzb2RlID1cblx0XHRcdFx0c2VyaWVzLmVwaXNvZGVzLmZpbmQoZXBpc29kZSA9PiBlcGlzb2RlLmVwaXNvZGVJbnQgPT0gYW5pbWUudXNlcl9yYXRlLmVwaXNvZGVzICsgMSlcblx0XHRcdFx0fHwgc2VyaWVzLmVwaXNvZGVzLmZpbmQoZXBpc29kZSA9PiBlcGlzb2RlLmVwaXNvZGVJbnQgPT0gYW5pbWUudXNlcl9yYXRlLmVwaXNvZGVzKVxuXHRcdFx0XHR8fCBzZXJpZXMuZXBpc29kZXMuZmluZChlcGlzb2RlID0+IGVwaXNvZGUuZXBpc29kZUludCA9PSAxKVxuXG5cdFx0XHRwbGF5ZXJVUkwuc2VhcmNoUGFyYW1zLmFwcGVuZCgnZXBpc29kZScsIHN0YXJ0RnJvbUVwaXNvZGUuaWQpXG5cdFx0fVxuXG5cdFx0bGluay5ocmVmID0gcGxheWVyVVJMLnRvU3RyaW5nKClcblx0fSBlbHNlIHtcblx0XHRXYXRjaEJ1dHRvblNlY3Rpb24ucXVlcnlTZWxlY3RvcignI3dhdGNoLW9ubGluZS1idXR0b24nKS50ZXh0Q29udGVudCA9ICfQndC10YIg0LLQuNC00LXQvidcblx0fVxuXG59XG5cblxuXG5hc3luYyBmdW5jdGlvbiBnZXRBbmltZSgpIHtcblx0Y29uc3QgaWRNYXRjaCA9IGxvY2F0aW9uLnBhdGhuYW1lLm1hdGNoKCdhbmltZXMvKFswLTldKyknKVxuXHRpZiAoIWlkTWF0Y2ggfHwgIWlkTWF0Y2hbMV0pIHtcblx0XHRyZXR1cm4gdW5kZWZpbmVkXG5cdH1cblxuXHRsZXQgaGVhZGVycyA9IG5ldyBIZWFkZXJzKHtcblx0XHRcIkFjY2VwdFwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcblx0XHRcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcblx0XHRcIlVzZXItQWdlbnRcIjogXCJQbGF5IFNoaWtpbW9yaTsgQnJvd3NlciBleHRlbnNpb247IGh0dHBzOi8vZ2l0aHViLmNvbS9jYXdhLTkzL3BsYXktc2hpa2ltb3JpXCJcblx0fSk7XG5cblx0Y29uc3QgZGF0YSA9IGF3YWl0IHNoaWtpbW9yaUFQSShgL2FuaW1lcy8ke2lkTWF0Y2hbMV19YCwge1xuXHRcdGhlYWRlcnNcblx0fSlcblxuXHRyZXR1cm4gZGF0YVxufSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFTLFdBQVcsQ0FBQyxJQUFJLEVBQUUsT0FB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
